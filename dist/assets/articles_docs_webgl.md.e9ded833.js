import{_ as s,o as a,c as n,S as l}from"./chunks/framework.f15d8f8c.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/docs/webgl.md","filePath":"articles/docs/webgl.md"}'),o={name:"articles/docs/webgl.md"},p=l(`<p>整理了一些常用的原生WebGL API。</p><h2 id="createshader" tabindex="-1">createShader <a class="header-anchor" href="#createshader" aria-label="Permalink to &quot;createShader&quot;">​</a></h2><p>创建一个着色器类型。可以是<code>顶点着色器</code>或者<code>片元着色器</code>,返回<code>WebGLShader</code>对象<br> 顶点着色器:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建顶点着色器</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> vertexShader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createShader</span><span style="color:#A6ACCD;">(gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VERTEX_SHADER)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>片元着色器</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建片元着色器</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> fragmentShader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createShader</span><span style="color:#A6ACCD;">(gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FRAGMENT_SHADER)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="shadersource" tabindex="-1">shaderSource <a class="header-anchor" href="#shadersource" aria-label="Permalink to &quot;shaderSource&quot;">​</a></h2><p>用于将着色器源代码分配给createShader 创建出的着色器对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shaderSource</span><span style="color:#A6ACCD;">(shader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> source)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li><code>shader</code>: WebGLShader 对象，要给其分配着色器源代码</li><li><code>source</code>: 着色器的源代码字符串，即包含着色器程序的 GLSL (OpenGL Shading Language) 代码</li></ul><p>示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个顶点着色器</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vertexShaderSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">  attribute vec2 a_position;</span></span>
<span class="line"><span style="color:#C3E88D;">  void main() {</span></span>
<span class="line"><span style="color:#C3E88D;">    gl_Position = vec4(a_position, 0.0, 1.0);</span></span>
<span class="line"><span style="color:#C3E88D;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个片元着色器</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fragmentShaderSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">  precision mediump float;</span></span>
<span class="line"><span style="color:#C3E88D;">  void main() {</span></span>
<span class="line"><span style="color:#C3E88D;">    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span>
<span class="line"><span style="color:#C3E88D;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建 WebGL 着色器对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vertexShader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createShader</span><span style="color:#A6ACCD;">(gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VERTEX_SHADER)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fragmentShader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createShader</span><span style="color:#A6ACCD;">(gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FRAGMENT_SHADER)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 给着色器对象分配源代码</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shaderSource</span><span style="color:#A6ACCD;">(vertexShader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> vertexShaderSource)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shaderSource</span><span style="color:#A6ACCD;">(fragmentShader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fragmentShaderSource)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="compileshader" tabindex="-1">compileShader <a class="header-anchor" href="#compileshader" aria-label="Permalink to &quot;compileShader&quot;">​</a></h2><p>编译 createShader 创建出的 <code>WebGLShader</code> 对象。</p><p>编译顶点着色器：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> vertexShader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createShader</span><span style="color:#A6ACCD;">(gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VERTEX_SHADER)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shaderSource</span><span style="color:#A6ACCD;">(vertexShader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">        precision mediump float;</span></span>
<span class="line"><span style="color:#C3E88D;">        void main(){</span></span>
<span class="line"><span style="color:#C3E88D;">                gl_Position = vec4(0.5,0.0,0.0, 1.0);</span></span>
<span class="line"><span style="color:#C3E88D;">                gl_PointSize = 10.0;</span></span>
<span class="line"><span style="color:#C3E88D;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 编译顶点着色器</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compileShader</span><span style="color:#A6ACCD;">(vertexShader)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>编译片元着色器：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> fragmentShader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createShader</span><span style="color:#A6ACCD;">(gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FRAGMENT_SHADER)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shaderSource</span><span style="color:#A6ACCD;">(fragmentShader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">        precision mediump float;</span></span>
<span class="line"><span style="color:#C3E88D;">        void main(){</span></span>
<span class="line"><span style="color:#C3E88D;">                gl_FragColor = vec4(1.0, 0, 0, 1);</span></span>
<span class="line"><span style="color:#C3E88D;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compileShader</span><span style="color:#A6ACCD;">(fragmentShader)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="attachshader" tabindex="-1">attachShader <a class="header-anchor" href="#attachshader" aria-label="Permalink to &quot;attachShader&quot;">​</a></h2><p><code>attachShader</code> 用于将顶点着色器和片元着色器附加到 WebGL 程序对象上，使它们成为一个完整的着色器程序.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建程序</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> program </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createProgram</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将顶点着色器挂载在着色器程序上。</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachShader</span><span style="color:#A6ACCD;">(program</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> vertexShader)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将片元着色器挂载在着色器程序上。</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachShader</span><span style="color:#A6ACCD;">(program</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fragmentShader)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="createprogram" tabindex="-1">createProgram <a class="header-anchor" href="#createprogram" aria-label="Permalink to &quot;createProgram&quot;">​</a></h2><p><code>createProgram</code> 方法用于创建一个着色器程序。没有参数，创建出程序后应该将着色器挂载在程序（program）上。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建顶点着色器</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> vertexShader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createShader</span><span style="color:#A6ACCD;">(gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VERTEX_SHADER)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shaderSource</span><span style="color:#A6ACCD;">(vertexShader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">        precision mediump float;</span></span>
<span class="line"><span style="color:#C3E88D;">        void main(){</span></span>
<span class="line"><span style="color:#C3E88D;">                gl_Position = vec4(0.5,0.0,0.0, 1.0);</span></span>
<span class="line"><span style="color:#C3E88D;">                gl_PointSize = 10.0;</span></span>
<span class="line"><span style="color:#C3E88D;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compileShader</span><span style="color:#A6ACCD;">(vertexShader)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建片元着色器</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> fragmentShader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createShader</span><span style="color:#A6ACCD;">(gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FRAGMENT_SHADER)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shaderSource</span><span style="color:#A6ACCD;">(fragmentShader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">        precision mediump float;</span></span>
<span class="line"><span style="color:#C3E88D;">        void main(){</span></span>
<span class="line"><span style="color:#C3E88D;">                gl_FragColor = vec4(1.0, 0, 0, 1);</span></span>
<span class="line"><span style="color:#C3E88D;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compileShader</span><span style="color:#A6ACCD;">(fragmentShader)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建程序</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> program </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createProgram</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将顶点着色器挂载在着色器程序上。</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachShader</span><span style="color:#A6ACCD;">(program</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> vertexShader)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将片元着色器挂载在着色器程序上。</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachShader</span><span style="color:#A6ACCD;">(program</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fragmentShader)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="linkprogram" tabindex="-1">linkProgram <a class="header-anchor" href="#linkprogram" aria-label="Permalink to &quot;linkProgram&quot;">​</a></h2><p>链接着色器程序，一般在attachShader之后执行。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建程序</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> program </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createProgram</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将顶点着色器挂载在着色器程序上。</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachShader</span><span style="color:#A6ACCD;">(program</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> vertexShader)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将片元着色器挂载在着色器程序上。</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachShader</span><span style="color:#A6ACCD;">(program</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fragmentShader)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//链接着色器程序</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">linkProgram</span><span style="color:#A6ACCD;">(program)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="useprogram" tabindex="-1">useProgram <a class="header-anchor" href="#useprogram" aria-label="Permalink to &quot;useProgram&quot;">​</a></h2><p>使用某个程序，一般在 linkProgram 之后执行。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">linkProgram</span><span style="color:#A6ACCD;">(program)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useProgram</span><span style="color:#A6ACCD;">(program)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="bufferdata" tabindex="-1">bufferData <a class="header-anchor" href="#bufferdata" aria-label="Permalink to &quot;bufferData&quot;">​</a></h2><h2 id="uniformmatrix4fv" tabindex="-1">uniformMatrix4fv <a class="header-anchor" href="#uniformmatrix4fv" aria-label="Permalink to &quot;uniformMatrix4fv&quot;">​</a></h2><h2 id="vertexattribpointer" tabindex="-1">vertexAttribPointer <a class="header-anchor" href="#vertexattribpointer" aria-label="Permalink to &quot;vertexAttribPointer&quot;">​</a></h2><h2 id="getattriblocation" tabindex="-1">getAttribLocation <a class="header-anchor" href="#getattriblocation" aria-label="Permalink to &quot;getAttribLocation&quot;">​</a></h2><p>获取顶点着色器中变量的地址，从而进一步给它赋值。 这是 WebGL 与 浏览器环境常见的通信接口之一，后续我们会一直使用到这个接口。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAttribLocation</span><span style="color:#A6ACCD;">(webgl程序</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">shader中的变量名称)</span></span></code></pre></div><p>例如要实现动态绘制一个点，当鼠标在 canvas 上点击某一处时，在该位置绘制一个点。点的位置变量<code>a_Position</code> 从外部的JS程序传入。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> vertexShader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createShader</span><span style="color:#A6ACCD;">(gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VERTEX_SHADER)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shaderSource</span><span style="color:#A6ACCD;">(vertexShader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    precision mediump float;</span></span>
<span class="line"><span style="color:#C3E88D;">    attribute vec2 a_Position;</span></span>
<span class="line"><span style="color:#C3E88D;">    void main(){</span></span>
<span class="line"><span style="color:#C3E88D;">        gl_Position = vec4(a_Position,0.0, 1.0);</span></span>
<span class="line"><span style="color:#C3E88D;">        gl_PointSize = 10.0;</span></span>
<span class="line"><span style="color:#C3E88D;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pointer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAttribLocation</span><span style="color:#A6ACCD;">(program</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a_Position</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">canvasxytowebglxy</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">700</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offsetX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offsetY</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">vertexAttrib2f</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pointer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">drawArrays</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">gl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">POINTS</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="enable" tabindex="-1">enable <a class="header-anchor" href="#enable" aria-label="Permalink to &quot;enable&quot;">​</a></h2><h2 id="clear" tabindex="-1">clear <a class="header-anchor" href="#clear" aria-label="Permalink to &quot;clear&quot;">​</a></h2><p>清除屏幕或画布上的内容。为了准备进行下一次绘制，确保绘制的新内容不会与之前的内容叠加，而是完全替换之前的画面，类似于canvas 2d中的 clearRect 的作用。</p><h2 id="drawarrays" tabindex="-1">drawArrays <a class="header-anchor" href="#drawarrays" aria-label="Permalink to &quot;drawArrays&quot;">​</a></h2><p>webgl最重要的 API 之一</p><h2 id="绘制一个点" tabindex="-1">绘制一个点 <a class="header-anchor" href="#绘制一个点" aria-label="Permalink to &quot;绘制一个点&quot;">​</a></h2><h2 id="绘制一个三角形" tabindex="-1">绘制一个三角形 <a class="header-anchor" href="#绘制一个三角形" aria-label="Permalink to &quot;绘制一个三角形&quot;">​</a></h2><h2 id="绘制正方体" tabindex="-1">绘制正方体 <a class="header-anchor" href="#绘制正方体" aria-label="Permalink to &quot;绘制正方体&quot;">​</a></h2><h2 id="绘制球体" tabindex="-1">绘制球体 <a class="header-anchor" href="#绘制球体" aria-label="Permalink to &quot;绘制球体&quot;">​</a></h2><h2 id="绘制小圆点" tabindex="-1">绘制小圆点 <a class="header-anchor" href="#绘制小圆点" aria-label="Permalink to &quot;绘制小圆点&quot;">​</a></h2><h2 id="绘制旋转的立方体" tabindex="-1">绘制旋转的立方体 <a class="header-anchor" href="#绘制旋转的立方体" aria-label="Permalink to &quot;绘制旋转的立方体&quot;">​</a></h2><h2 id="绘制旋转的球体" tabindex="-1">绘制旋转的球体 <a class="header-anchor" href="#绘制旋转的球体" aria-label="Permalink to &quot;绘制旋转的球体&quot;">​</a></h2><h2 id="正交相机" tabindex="-1">正交相机 <a class="header-anchor" href="#正交相机" aria-label="Permalink to &quot;正交相机&quot;">​</a></h2><h2 id="投影相机" tabindex="-1">投影相机 <a class="header-anchor" href="#投影相机" aria-label="Permalink to &quot;投影相机&quot;">​</a></h2><h2 id="光照" tabindex="-1">光照 <a class="header-anchor" href="#光照" aria-label="Permalink to &quot;光照&quot;">​</a></h2>`,54),e=[p];function r(t,c,D,y,i,F){return a(),n("div",null,e)}const d=s(o,[["render",r]]);export{C as __pageData,d as default};
